""""Object to Connect to the RC car and recieve and transmit data."""
from socket import timeout
import paho.mqtt.client as mqtt
import time
import tensorflow as tf
import numpy as np
import paho.mqtt.publish as publish
import buffer
from errors import SaveAndExitError
import warnings
import socket

timeout_mins = 1
dist_idx = (0, 4)
gps_idx = (772, 773)
mock_t = [float(i) for i in range(774)]
mock_arr = str(mock_t)
DATA_BUFFER = buffer.Buffer(dist_idx, gps_idx)
host_name = "test.mosquitto.org"
request_path = "HeatSeekingCar/Request"
observation_data_path = "HeatSeekingCar/Observation_Vector"
turn_direction_path = "HeatSeekingCar/Direction"
undervoltage_path = "HeatSeekingCar/Undervoltage"

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
 
    # Subscribing in on_connect() - if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe(observation_data_path)
    client.subscribe(undervoltage_path)
 
# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    # print(msg.topic+" "+str(msg.payload))

    if msg.topic == observation_data_path:
        DATA_BUFFER.msg = msg.payload
        DATA_BUFFER.msg_ready_flag = True

    if msg.topic == undervoltage_path:
        if b'1' in msg.payload:
            DATA_BUFFER.undervoltage_flag = True


class Connector():

    def __init__(self):
        self.data_buffer = DATA_BUFFER

        # Create an MQTT client and attach our routines to it.
        self.client = mqtt.Client()
        self.client.on_connect = on_connect
        self.client.on_message = on_message

        self.client.connect(host_name, 1883, 60)

        self.client.loop_start()

        # Timeout after 15 mins
        self.t_end = time.time() + 60 * timeout_mins

        self.check_for_data()

        print("Sending connection request...")
        publish.single(request_path, "1", hostname=host_name)

    def check_for_data(self):
        try:
            publish.single(request_path, "1", hostname=host_name)
        except socket.timeout:
            print("TIMED OUT: Saving and Exiting...")
            raise SaveAndExitError

        if self.data_buffer.msg_ready_flag: # If buffer not empty, send it to data pipeline
            print("Message Recieved\nConverting Buffer to Arrays...")
            # Translate from raw data to buffer
            tick = time.time()
            t_array, d_array, lat, long = DATA_BUFFER.buffer_to_arrays()
            tock = time.time()
            print(f"\n>Process Time: {tock - tick}\n> {d_array}\n({lat}, {long})")
            # TODO rm this print
            print(self.data_buffer.msg)

            t_array, d_array = self.preprocess_data(t_array, d_array)

            if self.data_buffer.undervoltage_flag:
                print(f"WARNING! Battery is near empty... Stopping at [{lat}, {long}]")
                raise SaveAndExitError

            return t_array, d_array, lat, long
        else:
            return mock_arr, mock_arr, None, None

    def preprocess_data(self, t_array, d_array):
        # Preprocessing: averaging filter on t_array, reduce size by half
        pre_t_array = tf.convert_to_tensor(
                t_array, dtype=np.float32, dtype_hint=None, name=None)
        pre_t_array = tf.reshape(pre_t_array, (1, 24, 32, 1))
        avg_pool_2d = tf.keras.layers.AveragePooling2D(pool_size=(2, 2),
                strides=(2, 2), padding='valid')
        pre_t_array = avg_pool_2d(pre_t_array)
        pre_t_array = tf.reshape(pre_t_array, (12, 16))
        pre_t_array = tf.clip_by_value(pre_t_array, clip_value_min=25, clip_value_max=40)

        # Round all values of t_array
        tf.round(pre_t_array)

        for idx, element in enumerate(d_array):
            d_array[idx] = round(element/10)*10

        if np.amin(d_array) < 0 or np.amin(pre_t_array) < 25 or np.amax(pre_t_array) > 40:
            warnings.warn("!!!! Garbage t_array or d_array values !!!!")
        
        return pre_t_array, d_array
            
    def send_turn(self, action: str):
        # If first attempt to send turn cause error, try again. else raise SaveAndExitError.
        # Transmit Next Turn
        print("Transmitting Next Turn to RC car...")
        try:
            # publish.single(turn_direction_path, b'[96.34461164 49.87041712 96.68398857 83.70261669 25.86645058 26.60210627\n 26.16073634 26.13792498 25.86104302 25.69405405 25.93749256 25.82068048\n 25.67579658 25.65335534 25.72665762 25.71813629 25.56949963 25.41882407\n 25.66970778 25.94594011 25.90314193 25.57912955 26.00386599 26.19573704\n 25.98031479 26.09651464 25.91764894 26.18016747 25.95334864 26.11889849\n 26.26318587 26.2094458  26.42113664 26.95104759 28.11608651 29.36402647\n 25.85427368 26.21475161 25.82893258 25.77410637 25.6313809  25.9837577\n 25.9815352  25.94444832 25.60528802 25.45043734 25.55876257 25.75139445\n 25.62314888 25.67849843 25.62148823 25.83773066 25.94232969 25.96271237\n 25.93683985 25.96635227 25.87438476 25.82995609 25.91045537 25.91413167\n 25.80127372 25.94673277 25.93513229 26.35283187 25.9801369  26.37463064\n 27.33473085 28.68576915 26.14962001 26.10393372 25.72135149 26.13546214\n 25.95057537 25.91689833 25.77526427 25.7586326  25.61387845 25.73008112\n 25.84426667 25.61168249 25.65908512 25.48585163 25.80776047 25.93875431\n 25.55764248 25.72173646 25.93868961 26.35556434 26.02308963 26.02162731\n 25.78319156 25.86054364 26.23442374 26.11366281 25.92153732 26.43820398\n 26.56722744 26.20355237 27.14145127 27.40442982 25.97611222 26.04388589\n 25.77620767 25.94309556 25.71075507 25.64877191 26.01602683 25.51287548\n 25.41808675 25.63829642 25.49439277 25.5452421  25.49523183 25.50320014\n 25.56716461 25.55965364 25.67673924 25.83861902 26.28869173 26.45403526\n 25.83237872 25.93146606 25.9076241  26.09831731 25.71534878 25.95369383\n 25.90780321 25.7484837  26.33886906 26.34301178 27.11330648 27.21791444\n 25.87743827 26.05428931 25.54997214 25.84820426 25.52157549 25.65056237\n 25.71145042 25.85420886 25.6790955  25.557949   25.40372055 25.80428775\n 25.39750894 25.45753463 25.44364961 25.45641768 25.51964614 25.97598838\n 27.79236484 27.48572813 26.28783122 26.11310737 25.79644711 25.92783986\n 25.45091302 25.9965552  26.37930254 26.2070165  26.08240349 26.51842589\n 26.59612735 27.05401175 26.17748421 25.39748617 25.96184601 25.79638784\n 25.53343819 25.51287548 25.29470817 25.61126305 25.47228088 25.33859819\n 25.30874833 25.57140021 25.51824329 25.29091022 25.38338108 25.53150253\n 25.64077605 25.9716289  28.62428926 28.32954215 26.59559661 26.11745713\n 25.77569861 25.89570973 25.80511251 25.57433133 26.35929148 26.30279454\n 26.31907516 26.43397604 26.73349151 27.15817239 25.78049757 25.63498947\n 25.61866714 25.86677317 25.57083806 25.60492401 25.467548   25.61187292\n 25.61621427 25.27396186 25.54927336 25.53831685 25.42322538 25.46992829\n 25.38373621 25.449061   25.43059572 25.74223824 27.57702598 27.5566202\n 25.85941795 26.00914773 25.63926622 25.76713342 26.06197787 25.73975037\n 26.19177842 26.20401893 26.61850503 26.55953494 27.03782929 27.63176373\n 25.73611621 25.8856987  25.75459334 25.96886921 25.5845529  25.24397809\n 25.5956944  25.46911905 25.51299626 25.54528691 25.64851482 25.6293495\n 25.52141742 25.20171121 25.37457705 25.32416403 25.51562453 25.36986633\n 26.37127125 26.29668409 25.57304992 25.60648825 25.73081854 25.95733288\n 25.6939172  25.83170773 26.0304408  26.27681676 26.28507253 26.76763081\n 26.78289513 27.30493566 25.83796328 25.62565779 25.76124707 25.89036174\n 25.60717615 25.57170312 25.50709957 25.66399843 25.2749507  25.44956916\n 25.42034012 25.48519949 25.15031885 25.24381076 25.30250074 25.32946589\n 25.30967589 25.39475552 25.57834667 25.45698791 25.7156379  25.34620059\n 25.75574682 26.02735135 25.76876045 25.64397609 26.2979046  26.37559513\n 26.73482704 26.96874334 27.68588136 28.06769205 25.8009159  25.57435757\n 25.72808472 25.82213793 25.47243483 25.52863137 25.61143261 25.45349014\n 25.34616896 25.60139274 25.42619889 25.46732456 25.21678125 25.45434471\n 25.18819198 25.26210915 25.09138288 25.26359598 25.55258865 25.32958781\n 25.50012961 25.33519722 25.61821486 25.45172036 25.60860643 25.5638754\n 25.84965705 26.28858553 26.64113246 27.01646086 27.94865476 29.16829893\n 25.81690513 25.72968053 25.34994319 25.64675588 25.41297095 25.36172049\n 25.27858425 25.73616825 25.3125651  25.42366029 25.37127707 25.30738115\n 25.05063761 25.29594036 25.14616886 25.44520765 25.27385987 25.10172322\n 25.24135401 25.40019536 25.52628051 25.43883925 25.38765589 25.77651215\n 25.92585129 25.63609578 25.87597116 26.30483899 26.75393229 27.93026475\n 31.93780159 32.66486224 25.60121357 25.51413311 25.64663966 25.6134212\n 25.45833949 25.16836502 25.25953945 25.49147549 25.34863674 25.19092525\n 25.41282321 25.42383794 25.16482143 25.24342504 24.83662161 25.27540812\n 25.32317723 25.22510818 25.20329859 25.17629328 25.100317   25.37046795\n 25.45440262 25.39314455 25.51401235 25.65240025 26.07302754 25.94607718\n 26.92484891 27.80426783 32.92432612 32.51112771 25.48061895 25.78172104\n 25.53175473 25.5680458  25.36273187 25.1395283  25.25576247 25.46619099\n 25.25304668 25.14242854 25.17055631 25.37808282 25.14480239 25.19623705\n 25.20697425 25.19999097 25.11919746 25.0005683  25.21371265 25.43722116\n 25.29287649 25.3520051  25.24828653 25.63236771 25.39351918 25.41577325\n 25.63648969 25.89613428 26.39682207 26.95450974 29.07078307 29.50742879\n 25.66274083 25.81756871 25.73518175 25.71807824 25.17991827 25.17987735\n 25.34701675 25.34821455 25.00072848 25.33833793 25.19593064 25.290512\n 25.32842352 25.27435135 25.20420824 25.2939485  25.07002231 25.17912747\n 25.29639969 25.23911525 25.12798468 25.27071702 25.37667594 25.29751618\n 25.51162822 25.54754457 25.93197755 26.05829498 25.73013781 25.98304238\n 27.17644402 27.80359745 25.72530263 25.83575865 25.79161048 25.79347198\n 25.48045507 25.32635801 25.60128724 25.66453495 25.15189781 25.48760107\n 25.05318884 25.43536843 25.16910498 25.19354342 25.40906697 25.26954447\n 25.19548829 25.29944047 25.35656896 25.47636067 25.41716494 25.26171782\n 25.49679108 25.6429054  25.40312643 25.67315825 25.69274025 25.74661136\n 26.04524419 26.00479541 26.57947336 26.60639654 26.32971822 25.72982027\n 25.58117277 25.56480285 25.16072596 25.20318075 25.23519411 25.35477319\n 25.41984889 25.03053381 25.3072444  25.32641114 25.20816188 25.2612814\n 25.23656982 25.43161902 25.26560276 25.0384257  25.45964418 25.54518095\n 25.14935637 25.35030425 25.42766309 25.52951918 25.75917991 25.43791813\n 25.95395797 26.00104651 26.05822198 25.98005974 26.10898213 26.39719392\n 25.97950455 25.85665485 25.74010135 25.96896899 25.51409324 25.54330539\n 25.4843948  25.76323328 25.5048416  25.58539761 25.30782025 25.41770744\n 25.22129102 25.24727615 25.5944842  25.54411196 25.40444952 25.31883649\n 25.21206953 25.55784258 25.47123449 25.3674576  25.69697613 25.52538725\n 25.66369485 25.51962693 25.81385225 25.90329275 25.62119114 26.16100054\n 26.26533342 26.79300741 26.29071283 25.86728776 25.65076647 25.71052783\n 25.85734247 25.29299372 25.78925321 25.63301322 25.28580791 25.27041816\n 25.38305842 25.46075544 25.41818669 25.30234735 25.29096072 25.40644171\n 25.31644039 25.19035109 25.28645126 25.51916204 25.35735571 25.53084115\n 25.67657649 25.92061187 25.63026656 25.62234613 25.83032001 25.87677453\n 26.35530258 25.82639717 26.48021289 26.80511295 26.24145991 25.74862636\n 25.80484684 26.15094132 25.39141009 25.724454   25.76749485 25.72948746\n 25.57218097 25.54175393 25.544333   25.69812835 25.10936546 25.60647287\n 25.63231394 25.56087902 25.23218044 25.42547918 25.38494281 25.4953231\n 25.60132671 25.68708381 25.56930843 25.93919219 25.79277656 26.01595197\n 26.02626315 26.27841834 26.20545986 25.81736587 26.68681227 26.86495196\n 26.10356576 26.19674149 25.968331   25.60272146 25.51233212 25.70878392\n 25.62947103 25.79479587 25.22437492 25.47862264 25.69556918 25.66841196\n 25.58632696 25.47510934 25.50518774 25.58134156 25.35127812 25.41574577\n 25.46750645 25.82679282 25.44236615 25.74425061 25.91465816 25.68271491\n 25.67868171 25.51327898 25.87227912 26.23425601 26.33135859 26.12068526\n 26.70846433 26.99391613 26.52716817 26.11070598 25.81336183 26.21426862\n 25.68862769 25.55403731 25.64720767 25.86654163 25.55731356 25.56244964\n 25.65645529 25.64682107 25.58293777 25.49391524 25.77971025 25.66542392\n 25.5482554  25.45782773 25.44021836 25.88201687 25.76589036 25.69798628\n 25.84286229 26.06399939 25.66930721 26.17517705 26.36491409 26.63432908\n 26.74504883 26.52774845 26.94675577 27.45570037 25.88931236 26.14740802\n 25.65046279 26.18151393 26.1915946  25.67055571 26.01455142 26.06579128\n 25.51838635 25.61447695 25.73861947 25.66880502 25.43209632 25.4279375\n 25.74149486 25.68341755 25.81026149 25.5188436  25.53467874 25.59346857\n 25.59093104 25.53327903 25.85662077 26.16083776 26.33443804 25.73179729\n 26.54207952 26.29121629 26.94317108 26.32146734 27.31274401 27.50505925\n 26.36557891 26.46321643 26.52267756 26.13227487 25.87072636 26.26404039\n 25.77001191 26.19841346 25.80334128 25.86119803 25.87027584 25.64004054\n 25.84004174 25.78742123 25.78207134 25.86723976 25.43424294 25.74986122\n 25.69605943 25.92239517 25.78871598 25.74063355 25.84185613 25.97186447\n 26.10922551 25.93915008 26.64688836 26.70096437 26.70193871 26.62171103\n 28.52772109 29.48185517 26.25128329 26.36461504 26.28689265 26.50005837\n 25.88924073 25.87702576 26.19855729 25.92708166 26.05800964 25.86633707\n 25.97776447 25.84496349 25.50693565 25.80666065 25.77818253 25.71754821\n 25.61274704 26.07505412 25.81741109 25.63281986 25.78477933 25.74783348\n 26.26590163 26.51819723 26.27496866 26.40806135 26.3595761  26.72305246\n 26.34946942 26.71408327 28.58171587 29.703698    0.          0.        ]', hostname=host_name)
            publish.single(turn_direction_path, int(action), hostname=host_name)
        except TypeError:
            try:
                publish.single(turn_direction_path, int(action), hostname=host_name)
            except TypeError:
                raise SaveAndExitError("Error In Transmitting Next Turn... Saving and Exiting...")
        finally:
            self.data_buffer.msg_ready_flag = False


if __name__ == "__main__":
    test_turns = iter([0, 1, 2, 3, 0, 1, 2, 3, 4])
    # file_path = 'observation_data.txt'
    # sys.stdout = open(file_path, "a")
    conn = Connector()
    while 1:
        t_array, d_array, lat, long = conn.check_for_data()
        if lat != -1:
            conn.send_turn(next(test_turns))