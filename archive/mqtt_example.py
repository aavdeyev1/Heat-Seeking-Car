"""MQTT Tx/Rx tranmission example"""
import paho.mqtt.client as mqtt
import time
import sys
import tensorflow as tf
import numpy as np

import paho.mqtt.publish as publish

import buffer

from threading import Thread

dist_idx = (0, 4)
gps_idx = (772, 773)
mock_t = [float(i) for i in range(774)]
mock_arr = str(mock_t)
DATA_BUFFER = buffer.Buffer(dist_idx, gps_idx)

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
 
    # Subscribing in on_connect() - if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe("HeatSeekingCar/rx_thermal")
    client.subscribe("HeatSeekingCar/rx_distances")
    client.subscribe("HeatSeekingCar/Observation_Vector")
 
# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+" "+str(msg.payload))

    if msg.topic == "HeatSeekingCar/rx_thermal":
        DATA_BUFFER.thermal = msg.payload

    elif msg.topic == "HeatSeekingCar/rx_distances":
        DATA_BUFFER.distance = msg.payload

    elif msg.topic == "HeatSeekingCar/Observation_Vector":
        DATA_BUFFER.msg = msg.payload
        DATA_BUFFER.msg_ready_flag = True

# mock_lat = 11.99999999999
# mock_long = 10.99999999999
# path = r"/Users/amelyaavdeyev/capstone_data/877.jpg"

# f=open(path, "rb")
# fileContent = f.read()
# byteArr = bytearray(fileContent)

# mock_msg = [0, 1, 2, 3, mock_lat, mock_long]
# print(f"SENT: {mock_msg}")

# publish.single("HeatSeekingCar/tx", byteArr, hostname="test.mosquitto.org")

# publish.single("HeatSeekingCar/tx", f"{mock_arr}", hostname="test.mosquitto.org")
# print("Done")

# Create an MQTT client and attach our routines to it.
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect("test.mosquitto.org", 1883, 60)

client.loop_start()

# init env

test_turns = iter([0, 1, 2, 3, 0, 1, 2, 3, 4])
file_path = 'observation_data.txt'
sys.stdout = open(file_path, "a")

print("Sending connection request...")
# publish.single("HeatSeekingCar/Request", "1", hostname="test.mosquitto.org")

# Timeout after 15 mins
t_end = time.time() + 60 * 15
while time.time() < t_end:
    time.sleep(1)
    # publish.single("HeatSeekingCar/Request", "1", hostname="test.mosquitto.org")

    print(DATA_BUFFER.msg_ready_flag)
    if True: # If buffer not empty, send it to data pipeline
        print(f"Message Recieved\nConverting Buffer to Arrays...")
        # # Translate from raw data to buffer
        # tick = time.time()
        # t_array, d_array, lat, long = DATA_BUFFER.buffer_to_arrays()
        # tock = time.time()
        # print(f"\n>Process Time: {tock - tick}\n> {d_array}\n({lat}, {long})")
        # print(DATA_BUFFER.msg)

        # # Preprocessing: averaging filter on t_array, reduce size by half
        # pre_t_array = tf.convert_to_tensor(
        #         t_array, dtype=np.float32, dtype_hint=None, name=None)
        # pre_t_array = tf.reshape(pre_t_array, (1, 24, 32, 1))
        # avg_pool_2d = tf.keras.layers.AveragePooling2D(pool_size=(2, 2),
        #         strides=(2, 2), padding='valid')
        # pre_t_array = avg_pool_2d(pre_t_array)
        # pre_t_array = tf.reshape(pre_t_array, (24/2, 32/2))
        # # Round all values
        # tf.round(pre_t_array)
        # for idx, element in enumerate(d_array):
        #     d_array[idx] = round(element/10)*10

        # Pass Info to Data Pipeline, return the pipeline object
        # get_next_turn_thread = Thread(target=env.step(prev_turn))

        # Pass pipeline object to environment and take a step
        # environment.step

        # Recieve Next Turn
        # mock_turn = next(test_turns)
        mock_turn=b'[ 88.04582357 304.22483683 113.61112833  66.19158506  26.52978721\n  25.75188952  26.22181007  26.01999676  26.0496444   25.57645388\n  25.83053697  25.70331221  25.56911239  25.53642316  25.61991929\n  25.72286868  25.81715729  25.41860545  25.68175342  25.71035015\n  25.79668135  25.69976431  25.89725636  25.82484278  25.74492988\n  25.71714036  25.6685742   25.91798384  26.14744244  25.69308295\n  26.1545896   26.27015913  26.7037741   26.20762202  26.97593339\n  28.80250934  26.29437358  25.92837617  25.71029511  25.98355853\n  25.79801754  25.73620609  25.86434639  25.57455683  25.366452\n  25.46543596  25.56122765  25.76118158  25.5060904   25.90987954\n  25.73331138  25.7302212   25.71084141  25.62538281  25.58080555\n  25.98067575  25.63214146  25.72156866  25.6546888   25.52506397\n  25.68264771  25.83669251  25.81573746  26.242129    26.05126053\n  26.844762    26.92709834  28.20912518  25.87129546  25.82088616\n  25.92074021  26.01798846  25.843625    25.53806784  25.42255456\n  25.64208529  25.39319524  25.50284318  25.40702977  25.71207637\n  25.5526207   25.57635792  25.17360218  25.61673423  25.66400798\n  25.60485778  25.94294064  26.01383919  25.91639908  25.67106891\n  25.67591207  25.61098242  26.26625908  25.99523552  25.97232673\n  25.83522616  26.28202046  26.44561938  26.81214377  27.53499893\n  25.69184235  25.93514814  25.65757686  25.68878956  25.33202808\n  25.66888639  25.5392526   25.7577471   25.41200714  25.530827\n  25.37770938  25.75253157  25.27729531  25.59787974  25.34819668\n  25.55201321  25.56030432  25.83407599  25.84946385  26.12759983\n  25.37909657  25.59721603  25.79018276  25.98983512  25.73226606\n  25.84488641  25.94411459  26.57626854  25.87358623  26.23186034\n  26.7838819   26.87466209  25.769463    25.47590197  25.85885905\n  25.86956739  25.53784154  24.93450028  25.26091245  25.73769113\n  25.46915803  25.44175896  25.2972181   25.49171354  25.29122729\n  25.34132794  25.33723603  25.5303322   25.70525837  25.57094129\n  26.51070067  26.6672396   25.96881027  25.56932655  25.8049273\n  25.57643974  25.97204028  25.35720414  25.9804459   25.93797984\n  25.81342328  25.90472295  26.68438046  26.72903929  25.59250831\n  26.04058269  25.5718111   25.41593678  25.53651065  25.64032681\n  25.62374526  25.72108738  25.55871094  25.33143787  25.29066899\n  25.36729275  25.21452075  25.46228315  25.17155685  25.42439959\n  25.71460598  26.1465731   27.46007107  26.75827581  25.96123313\n  25.59319222  25.54466919  25.6731674   25.81097459  25.97675069\n  26.099726    26.04622345  26.04272832  26.48535626  26.42096815\n  27.24084408  25.6727738   25.80033262  25.64359459  25.49231078\n  25.80895385  25.37662939  25.57309941  25.39242822  25.31510916\n  25.25244264  25.44313253  25.32880837  25.49567035  25.26524879\n  25.10063387  25.3327168   25.68124417  26.16871186  27.92457098\n  27.5347739   25.85177554  25.59031824  25.6398926   25.53911562\n  25.83315855  25.74402904  25.94757277  26.08530398  26.51089431\n  26.13025172  27.28921727  27.69639946  25.47305303  25.77652774\n  25.50700111  25.98697651  25.35446734  25.57601988  25.47868279\n  25.66744428  25.396378    25.43786589  24.98638365  25.33892865\n  25.22913003  25.3572728   25.17098623  25.48273328  25.39941634\n  26.06485325  26.97708185  26.74598951  25.65021491  25.49863759\n  25.71963258  25.63135033  25.5764119   25.84293311  25.91206009\n  26.57323646  26.31204082  26.81007223  27.37145945  27.37636347\n  26.16207572  25.78216734  25.90115411  25.53342812  25.50050587\n  25.2417741   25.30038917  25.54774117  25.35361203  25.1515702\n  25.22465221  25.45759052  25.29784256  25.04307981  25.19623193\n  25.55230437  25.37299214  25.19143827  25.38185387  25.61399848\n  25.51420629  25.32513965  25.44020157  25.69662874  25.77476896\n  25.52588731  26.19047961  26.126086    26.91278871  26.85000207\n  28.93257152  28.82897596  25.39697531  25.73634446  25.85472132\n  25.59465888  25.24785509  25.42110428  25.19789533  25.63931817\n  25.22945629  25.40433357  24.95557136  25.62241417  25.18420129\n  25.26319195  25.15611993  25.23963079  25.2288604   25.24267182\n  25.25719913  25.31253539  25.19418575  25.32178684  24.9825197\n  25.44907141  25.49128279  25.45502064  25.7312627   26.56990517\n  26.66510829  27.49193936  28.65701045  29.23053875  25.70939349\n  25.47865006  25.2423206   25.65002992  25.30607218  25.24503601\n  25.27066053  25.32788465  25.20623325  25.2175484   25.26499497\n  25.53169909  25.19447838  25.09727333  25.28501241  24.99829206\n  24.99938884  25.23424946  25.04648243  25.28371105  25.32228577\n  25.13031143  25.37952062  25.35179956  25.60056231  25.63020038\n  26.14226461  26.18608422  30.13825994  30.32757023  31.36125928\n  30.39729706  25.34229142  25.40494063  25.16313672  25.74943448\n  25.12500909  25.26973382  25.14219995  25.38389928  25.14202765\n  25.26263057  25.1221114   25.23187682  25.04828678  25.13627008\n  25.04863996  25.08519455  24.87152938  25.11752778  25.17409641\n  25.42206937  25.08025606  24.97451268  25.1397455   25.48908838\n  25.17720672  25.31929922  25.95474368  26.48097078  29.19048459\n  31.85904162  31.87199476  29.23981753  25.78615036  25.4002542\n  25.30027316  25.92819887  25.36227341  25.2273576   25.34337523\n  25.06461182  25.14642981  25.11443321  25.23600761  25.09050478\n  25.20501453  24.99704544  25.01784108  25.16627643  25.09802015\n  25.05079304  25.1939523   25.23376403  25.27675969  24.8673424\n  25.24102909  25.41387488  25.50368913  25.52194305  25.52834572\n  25.64720214  27.40069886  27.82376836  28.15319197  28.36216022\n  25.68170715  25.84103843  25.37081917  25.49004241  25.38371218\n  25.48189258  25.13096192  25.43272115  24.88340034  25.31933021\n  24.81927772  25.0971945   24.87670699  25.16678449  25.08725573\n  25.26932195  25.12381099  25.07133193  25.00379154  25.13122913\n  25.19288395  25.25480229  25.2588647   25.1889973   25.28445793\n  25.55069156  25.81340626  25.94858438  25.89184064  26.4434697\n  26.89237245  27.51921621  26.45161607  25.44726617  25.56042707\n  25.79606665  25.48242917  25.41980091  25.29328454  25.352893\n  25.22858385  25.09925962  25.2066538   25.40516304  25.23161761\n  25.07706415  25.30241407  25.32212883  25.34562208  25.09719946\n  25.0705844   25.35937152  25.12572067  25.23844391  25.28843599\n  25.42178593  25.63009958  25.32579996  25.71179334  25.62762258\n  25.93625059  25.59063763  26.30217319  26.48435603  25.78991725\n  25.89220906  25.71104413  25.69760856  25.4845663   25.52150482\n  25.52209303  25.54169688  25.11752678  25.28835268  25.19000374\n  25.48031733  25.00511927  25.4091276   25.11943833  25.32397963\n  24.80110452  25.36206858  25.16167164  25.34724937  25.21713383\n  25.43105538  25.30958853  25.83794526  25.30462988  25.67403712\n  25.57770666  25.89094135  25.93849827  26.16707199  26.15825586\n  26.46085403  25.87076334  25.45909079  25.89094854  25.72511916\n  25.74972891  25.31477604  25.37702625  25.44137421  25.59013906\n  25.27995529  25.10799633  25.21010773  25.20310143  25.04385324\n  25.22281071  25.25136496  25.56800959  25.11322304  25.19754378\n  25.34704858  25.46124853  25.24982223  25.37662148  25.18844112\n  25.67281986  25.51999822  25.57361801  25.51351387  25.95944746\n  26.04096286  25.97816406  26.48653644  25.87519102  26.18061396\n  25.66202926  25.72924342  25.38992332  25.522507    25.24920611\n  25.62854534  25.36388065  25.3545896   25.35919349  25.53669262\n  25.12246007  25.37025079  25.26340829  25.29841285  25.0168486\n  25.3528869   25.35636235  25.41058287  25.14099577  25.21897103\n  25.23176775  25.47744021  25.39293538  25.63293473  25.84414934\n  25.76654017  25.78275842  25.87073186  26.35900971  26.6915276\n  26.13184071  26.2258394   25.83316855  25.89901105  25.64815038\n  25.48792065  25.3270175   25.39352143  25.36023097  25.3237549\n  25.73031079  25.29003855  25.41475126  25.29196406  25.24430577\n  25.63070266  25.50140428  25.11886231  25.47613815  25.57700498\n  25.59768882  25.14886944  25.57481032  25.47058839  25.68462727\n  25.51807874  26.19567992  26.30100657  25.93948894  26.18051984\n  26.20805719  26.54966896  25.50793796  26.23809969  25.70828792\n  25.90294502  25.26864635  25.47855418  25.73705279  25.46309575\n  25.53257899  25.47292722  25.37747699  25.46186168  25.27259362\n  25.55883667  25.29116897  25.37655654  25.23325929  25.40469642\n  25.34903544  25.41256289  25.43036008  25.52844715  25.56608663\n  25.69164909  25.68501721  25.91443072  25.89420197  26.41409613\n  25.73069327  26.00828077  26.39918826  26.48101499  26.58227595\n  25.83133525  25.70367872  25.95285898  25.97725303  25.30731306\n  25.78179209  25.74855245  25.56026799  25.44459323  25.76475886\n  25.52914097  25.68414452  25.3762249   25.36458034  25.54777891\n  25.64631488  25.4430434   25.65681497  25.98084688  25.65787258\n  25.69349891  25.97998694  25.94540978  25.95839597  25.92128228\n  25.95599427  26.36024466  26.29345438  26.40605163  26.83560081\n  27.5608888   26.27269364  26.52497796  26.13752582  26.21764227\n  25.80008683  25.6909794   25.52201744  25.83527676  25.39881152\n  25.50506984  25.61945554  25.77790569  25.20581907  25.31882945\n  25.6226573   25.89186137  25.26973076  25.40964893  25.52583792\n  25.81816461  25.47186572  25.77364197  25.73681384  25.92292369\n  25.54006711  26.03591611  25.96594077  26.65025925  26.3012026\n  26.57027053  26.75050397  27.90321449  26.25407825  25.811461\n  26.24855915  26.65079515  25.9071674   25.86344031  26.06341121\n  26.07997412  25.69502476  25.62007662  26.11729612  25.98341643\n  25.96289907  25.32579996  25.78812677  25.74907581  25.78355158\n  25.51590319  26.06735967  25.80385985  25.80504601  25.74885262\n  25.86933285  26.12841836  26.44250409  26.11889803  26.2031543\n  26.24292302  26.21909565  26.30432842  27.55800903  28.99646287\n  25.74104218  26.61236841  26.33129633  26.38693959  25.91676319\n  25.90951194  25.93843841  26.0901109   25.5536879   25.75486167\n  25.85690781  26.09122409  25.38636801  25.8124527   25.4225082\n  26.20219176  25.37421375  25.84514203  25.57311967  25.89827019\n  25.53615624  25.76632264  26.14464741  26.40646119  26.00096728\n  25.99001185  26.40749008  26.6089757   26.0310981   27.22359699\n  29.12433261  29.98250165   0.           0.        ]'

        # Transmit Next Turn
        print("Transmitting Next Turn to RC car...")
        publish.single("HeatSeekingCar/Observation_Vector", mock_turn, hostname="test.mosquitto.org")
        DATA_BUFFER.msg_ready_flag = False

# A second stop loop will be if the target reached, or num_turns is at max
client.loop_stop()